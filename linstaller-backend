#!/bin/bash
 
function log() {
  echo "${1}" > "${message_file}"
}
 
function install_on_mbr() {
  log "Mounting /target..."
  mkdir -p "/target"
  mount -o rw "${target_partition}" /target || {
    log "Fail when trying to mount ${target_partition} in read-write mode in /target"
    exit 1
  }
  
  test -b /${home_partition} && {
    log "Mounting /target/home..."
    rm -rf "/target/home"
    mkdir -p "/target/home"
    mount -o rw "${home_partition}" /target/home || {
      log "Fail when trying to mount ${home_partition} in read-write mode in /target/home"
      exit 2
    }
  }
 
  log "Extracting the system..."
  [ ! -z "${squashfs_file}" ] && {
    unsquashfs -f -d /target "${squashfs_file}" || {
      log "Fail when extracting ${squashfs_file} to /target"
      exit 3
    }
  }
  
  log "Generating fstab"
  mount | grep "${target_partition}" | sed 's| on /target | / |;s|type ||; s|(.*| rw 0 1|'          > /target/etc/fstab
  mount | grep "${home_partition}"   | sed 's| on /target/home | /home |;s|type ||; s|(.*| rw 0 1|' >> /target/etc/fstab
 
  log "Installing GRUB"
  mount -o bind /proc /target/proc
  mount -o bind /sys  /target/sys
  mount -o bind /dev  /target/dev
  mkdir -p /target/tmp
  chroot /target grub-install --force "${target_disk}" || {
      log "Fail when installing GRUB on ${target_partition}"
      exit 4
  }
  chroot /target update-grub || {
      log "Fail when updating GRUB on ${target_partition}"
      exit 5
  }
 
  log "Setting up language..."
  echo "LANG=${language}.UTF-8"   >  /target/etc/default/locale
  echo "LC_ALL=${language}.UTF-8" >> /target/etc/default/locale
  
  log "Setting up keyboard..."
  echo "KEYMAP=${keyboard_map}" > /target/etc/vconsole.conf
 
  log "Setting up timezone..."
  ln -sf "/usr/share/zoneinfo/${timezone}" /target/etc/localtime
  echo "${timezone}" > /target/etc/timezone
 
  log "Setting up hostname..."
  echo "${hostname}" > /target/etc/hostname
 
  log "Setting up user..."
  chroot /target useradd -m -s /bin/bash "${user_name}"
  chroot /target usermod -aG sudo "${user_name}"
  echo -e "${user_password}\n${user_password}" | chroot /target passwd "${user_name}"
 
  log "Running post install"
  [ -f "/target/usr/bin/post-install" ] && {
    chroot /target /usr/bin/post-install
  }
  
  umount -l /target/proc
  umount -l /target/sys
  umount -l /target/dev
  
  log "Install finished"
  
  exit 0
}

function install_on_uefi() {
  echo "Not implemented yet"
  exit 1
}

for arg in "${@}"; do
  if echo "${arg}" | grep -q "^--target-partition="; then
    target_partition=$(echo "${arg}" | sed 's|^--target-partition=||')
    shift
  elif echo "${arg}" | grep -q "^--language="; then
    language=$(echo "${arg}" | sed 's|^--language=||')
    shift
  elif echo "${arg}" | grep -q "^--user-name="; then
    user_name=$(echo "${arg}" | sed 's|^--user-name=||')
    shift
  elif echo "${arg}" | grep -q "^--user-password="; then
    user_password=$(echo "${arg}" | sed 's|^--user-password=||')
    shift
  elif echo "${arg}" | grep -q "^--squashfs="; then
    squashfs_file=$(echo "${arg}" | sed 's|^--squashfs=||')
    shift
  elif echo "${arg}" | grep -q "^--hostname="; then
    hostname=$(echo "${arg}" | sed 's|^--hostname=||')
    shift
  elif echo "${arg}" | grep -q "^--timezone="; then
    timezone=$(echo "${arg}" | sed 's|^--timezone=||')
    shift
  elif echo "${arg}" | grep -q "^--keyboard-map="; then
    keyboard_map=$(echo "${arg}" | sed 's|^--keyboard-map=||')
    shift
  fi
done

[ -z "${target_partition}" ] && { echo "Missing target partition";  exit 42; }
[ -z "${language}" ]         && { echo "Missing language";          exit 42; }
[ -z "${user_name}" ]        && { echo "Missing user name";         exit 42; }
[ -z "${user_password}" ]    && { echo "Missing password";          exit 42; }
[ -z "${squashfs_file}" ]    && { echo "Missing system image file"; exit 42; }
[ -z "${hostname}" ]         && { echo "Missing hostname";          exit 42; }
[ -z "${timezone}" ]         && { echo "Missing time zone";         exit 42; }
[ -z "${keyboard_map}" ]     && { echo "Missing keyboard map";      exit 42; }
[ -z "${keyboard_map}" ]     && { echo "Missing keyboard map";      exit 42; }

if [ -d "/sys/firmware/efi" ]; then
  install_on_uefi
else
  install_on_mbr
fi
